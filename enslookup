#!/usr/bin/env node

(async () => {

    // get the ens name to lookup as the first argument to the command
    const [,,name] = process.argv;
    // bail if no name provided
    if(!name){
        console.error('No name provided for lookup\nUsage: enslookup <name>')
        return;
    }
    // bail if no infura url provided as environment variable
    if(!process.env.INFURA_URL){
        console.error(`Missing INFURA_URL environment variable`);
        return;
    }
    console.log(`Name:\t\t${name}`);

    // load web3 library
    const Web3 = require('web3');

    // connect to an Infura endpoint to connect to Ethereum (passed as Environment Variable)
    // feel free to use your own mainnet node
    const web3 = new Web3(process.env.INFURA_URL);

    // get the resolver contract 
    const resolver = await web3.eth.ens.resolver(name);

    // get the resolver contract address
    const resolverAddress = resolver.address;
    console.log(`Resolver:\t${resolverAddress}`);

    // bail if resolver does not exist
    if(resolverAddress === '0x0000000000000000000000000000000000000000'){
        return;
    }

    const ensInterface = {
        address: '0x3b3b57de',
        contentHash: '0xbc1c58d1',
        pubKey: '0xc8690233'
    }

    if(await web3.eth.ens.supportsInterface(name, ensInterface.address)){
        const address = await web3.eth.ens.getAddress(name);
        const balanceWei = await web3.eth.getBalance(address);
        console.log(`Address:\t${address} (${web3.utils.fromWei(balanceWei, 'ether')} ether)`);
    }

    if(await web3.eth.ens.supportsInterface(name, ensInterface.pubKey)){
        const {x, y} = await web3.eth.ens.getPubkey(name);
        console.log(`Public Key:`);
        console.log(`\t\tx = ${x}`);
        console.log(`\t\ty = ${y}`);
    }
    
    if(await web3.eth.ens.supportsInterface(name, ensInterface.contentHash)){
        const contentHash = await web3.eth.ens.getContenthash(name);
        console.log(`Content hash:\t${contentHash}`);
    }

})();